version: 2 # use CircleCI 2.0
jobs: # basic units of work in a run
  build: # runs not using Workflows must have a `build` job as entry point
    docker: # run the steps with Docker
      # CircleCI Go images available at: https://hub.docker.com/r/circleci/golang/
      - image: circleci/golang:1.11 #
      - image: circleci/mysql:5.6

    steps: # steps that comprise the `build` job
      - checkout # check out source code to working directory

      - restore_cache: # restores saved cache if no changes are detected since last run
          # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          keys:
            - v2-pkg-cache

      - run: (cd $GOPATH; go get -v github.com/rubenv/sql-migrate/...)

      #  CircleCi's Go Docker image includes netcat
      #  This allows polling the DB port to confirm it is open before proceeding
      - run:
          name: Waiting for Mysql to be ready
          command: |
            for i in `seq 1 30`;
            do
              nc -z localhost 3306 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for Mysql && exit 1

      - run:
          name: Run migrations
          # Store the results of our tests in the $TEST_RESULTS directory
          command: |
            sql-migrate up -config=./migration.yaml -env=test

      - run:
          name: Run unit tests
          environment: # environment variables for the build itself
            GO111MODULE: "on"
          # Store the results of our tests in the $TEST_RESULTS directory
          command: |
            go test -v ./...

      - run:
          name: Build
          environment: # environment variables for the build itself
            GO111MODULE: "on"
          command: |
            go build # pull and build dependencies for the project

      - save_cache: # Store cache in the /go/pkg directory
          key: v2-pkg-cache
          paths:
            - "/go/pkg"
